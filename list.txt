
0. if finished in 5 minuts, then skip for 1 day
1. brute force solution
2. optimize solution

https://www.pramp.com/dashboard#/

/*******************  chapter 1 - LL  ********************/
1       - 1 LL create
1       - 2 LL delete 1
1       - 3 LL delete 2
1       - 4 LL insert 1
1       - 5 LL insert 2
1       - 6 LL hasCircular 1
1       - 7 LL hasCircular 2
1       - 8 LL create circular
1       - 9 LL entry of circular
1       - 10 LL add 2 LL
1       - 11 LL reverse
1       - 12 swap 2 ajacent elements 1(value)
1       - 13 swap 2 ajacent elements 2(memory)
1       - 14 remove the nth node from end of list
1       - 15 if 2 LL connected
1       - 16 rm dup nodes (using 2 points)

/*******************  chapter 2 - bit man  ********************/
1       - 1 binary print
1       - 2 is little ending
0       - 3 bit man area (leetcode)
1       - 4 bit set
1       - 5 bits set
1       - 6 bit clear
1       - 7 bits clear
1       - volatile

/*******************  chapter 3 - DP  ********************/
0       - 1 ladder
0       - 2 bagpack

/*******************  chapter 4 - array  ********************/
1       - 1 char *arr[], char (*arr)[]
1       - 2 longest unique characters in a string
0       - 3 longest common characters in 2 strings
0       - 4 remove specific element
0       - 5 sorting the square of an array elements
0       - 6 spiral matrix
0       - 7 shortest consective sum of elements >= key  brute force
1       - 8 shortest consective sum of elements >= key  dp
0       - 9 merge 2 arrays
0       - 10 remove duplicated elements

/*******************  chapter 5 - sorting  ********************/
0       - 1 binary search
0       - 2 quick sort
0       - 3 bubble
0       - 4 select

/*******************  chapter 6 - memory  ********************/
1       - 1 memory malloc align
0       - 2 memory copy - implement
0       - 3 string copy - implement
0       - 4 binary style print

/*******************  chapter 7 - hash table  ********************/
0       - 1. isAnagram
0       - 2. common elements in 2 array
0       - 3. Happy numbers
0       - 4. 

/*******************  chapter 8 - recursion  ********************/
0       - 1. binary print 1

/*******************  chapter 9 - others  ********************/
1       - 1. sizeof(int)