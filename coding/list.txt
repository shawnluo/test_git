
0. if finished in 5 minuts, then skip for 1 day
1. brute force solution
2. optimize solution

https://www.pramp.com/dashboard#/


/*******************  chapter 0 - cracking the code  ********************/

/*******************  chapter 1 - string  ********************/
1       - 01. string copy
1       - 02. is sub string using number
1       - 03. is sub string using pointer
1       - 04. first non-repeat char
1       - 05. longest common sub string in 2 strings
1       - 06. longest common subsequnce in 2 strings
1       - 07. longest unique substring
0       - 08. shortest sum of consective array equal or larger than key
0       - 09. z transform
0       - 10. Permutation in String(leetcode 567)
0       - 11. find andgrams in a string

/*******************  chapter 2 - array  ********************/
1       - 01. char *arr[], char (*arr)[]
1       - 02. longest unique characters in a string
1       - 03. longest common characters in 2 strings (brute force)
1       - 04. longest common characters in 2 strings (dp)
1       - 05. remove specific element
1       - 06. sorting the square of an array elements
1       - 07. spiral matrix
1       - 08. rotate matrix
1       - 08 - 2. rotate matrix (flip over diagonal)
1       - 09. shortest consective sum of elements(positive) >= key  brute force
1       - 10. shortest consective sum of elements(positive) >= key  slide window
1       - 11. smallest sum contiguous subarray
1       - 12. merge 2 sorted arrays
1       - 13. remove duplicated elements
1       - 14. insert key to array
1       - 15. move elements backward 1 pos from number n
1       - 16. reverse interger
1       - 17. hanoi
0       - 18. roman to decimal
0       - 19. binary search the biggest value in sorted aray

/*******************  chapter 3 - sorting  ********************/
1       - 01. binary search
1       - 02. quick sort
1       - 03. bubble
1       - 04. select sorting

/*******************  chapter 4 - memory  ********************/
1       - 01. memory malloc align
1       - 02. memory copy - implement
1       - 03. string copy - implement
1       - 04. binary style print

/*******************  chapter 5 - LL  ********************/
1       - 01. LL create
1       - 02. LL delete 1
1       - 03. LL delete 2
1       - 04. LL insert 1
1       - 05. LL insert 2
1       - 06. LL hasCircular 1
1       - 07. LL hasCircular 2
1       - 08. LL create circular
1       - 09. LL entry of circular
1       - 10 LL add 2 LL
1       - 11 LL reverse
1       - 12 swap 2 ajacent elements 1(value)
1       - 13 swap 2 ajacent elements 2(memory)
1       - 14 remove the nth node from end of list
1       - 15 if 2 LL connected
1       - 16 rm dup nodes (using 2 points)
1       - 17 merge 2 LL

/*******************  chapter 6 - bit man  ********************/
1       - 01. binary print
1       - 02. is little ending
1       - 03. bit man area (leetcode)
1       - 04. bit set
1       - 05. bits set
1       - 06. bit clear
1       - 07. bits clear
1       - 08. volatile
1       - 09. count ones

/*******************  chapter 7 - DP  ********************/
0       - 01. ladder
0       - 02. ladder with cost
0       - 03. backpack every item can only be chosen once
0       - 04. backpack every item no limitation
0       - 04. best route find
0       - 05. LCS (longest common subsequence)
0       - 06. robot path
0       - 07. robot path 2
0       - 08. one integer break to - sum of 2 integers, and maximum of multiple
1       - 09. tribpnacci
0       - 10. Longest Increasing Subsequence

/*******************  chapter 8 - hash table  ********************/
0       - 01. isAnagram
0       - 02. common elements in 2 array
0       - 03. Happy numbers
0       - 04. 

/*******************  chapter 9 - recursion  ********************/
0       - 01. binary print 1
0       - 02. two recursion in one recursion
0       - 03. permutation

/*******************  chapter 10 - others  ********************/
1       - 01. sizeof(int) returns unsigned longest
0       - 02. long vs double
1       - 03. mmap example
0       - 04. mmap using driver
0       - 05. /dev/mem
0       - 06. mutex
0       - 07. pipe

0       - 100. add binary, return string